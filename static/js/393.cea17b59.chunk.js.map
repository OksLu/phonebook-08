{"version":3,"file":"static/js/393.cea17b59.chunk.js","mappings":"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","sources":["components/Modal/Modal.jsx","webpack://react-homework-template/./src/pages/ContactsPage.module.css?7675","webpack://react-homework-template/./src/components/contactsList/ContactsList.module.css?908f","hooks/useModal.js","webpack://react-homework-template/./src/components/contactEl/Contact.module.css?fd07","webpack://react-homework-template/./src/components/contactsForm/ContactForm.module.css?2c8f","components/EditContactForm/EditContactForm.jsx","components/contactEl/Contact.jsx","redux/contacts/selectors.js","components/contactsList/ContactsList.jsx","webpack://react-homework-template/./src/components/filter/Filter.module.css?e85f","components/filter/Filter.jsx","components/contactsForm/ContactsForm.jsx","pages/ContactsPage.js"],"sourcesContent":["import { useEffect } from 'react';\nimport './Modal.css';\n\nexport const Modal = ({ children, closeModal }) => {\n  useEffect(() => {\n    const onPessKeyDown = e => {\n      if (e.code === 'Escape') {\n        closeModal();\n      }\n    };\n\n    window.addEventListener('keydown', onPessKeyDown);\n\n    return () => window.removeEventListener('keydown', onPessKeyDown);\n  }, [closeModal]);\n  const handleClose = e => {\n    if (e.target.nodeName !== 'DIV') {\n      return;\n    }\n    closeModal();\n  };\n\n  return (\n    <div onClick={handleClose} className=\"overlay\">\n      <div className=\"modal\">{children}</div>\n    </div>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactSection\":\"ContactsPage_contactSection__sUdC7\",\"modalBtn\":\"ContactsPage_modalBtn__-zGUI\"};","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactsList_list__i2+2R\",\"item\":\"ContactsList_item__1JGnj\"};","import { useState } from 'react';\n\nfunction useModal(state) {\n  const [showModal, setShowModal] = useState(state);\n  const toggleModal = () => setShowModal(prevState => !prevState);\n\n  return { toggleModal, showModal };\n}\n\nexport default useModal;\n","// extracted by mini-css-extract-plugin\nexport default {\"contact\":\"Contact_contact__1ZM+m\",\"name\":\"Contact_name__fz64Z\",\"number\":\"Contact_number__cRWdN\",\"close\":\"Contact_close__y45kA\",\"edit\":\"Contact_edit__F+JD+\"};","// extracted by mini-css-extract-plugin\nexport default {\"modalForm\":\"ContactForm_modalForm__uBjg8\",\"modalInput\":\"ContactForm_modalInput__eyl-V\",\"label\":\"ContactForm_label__2QOqy\",\"addBtn\":\"ContactForm_addBtn__CPSNS\"};","import { useState } from 'react';\nimport css from '../contactsForm/ContactForm.module.css';\nimport { useDispatch } from 'react-redux';\nimport { updateContact } from 'redux/contacts/contactsApi';\n\nexport const EditContactForm = ({ id, name, phone, closeModal }) => {\n  const [updatedName, setUpdatedName] = useState(name);\n  const [updatedPhone, setUpdatedPhone] = useState(phone);\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    const { name, value } = e.target;\n    if (name === 'name') {\n      setUpdatedName(value);\n    }\n    if (name === 'number') {\n      setUpdatedPhone(value);\n    }\n  };\n\n  const handleEditContact = () => {\n    const updatedContact = {\n      id,\n      name: updatedName,\n      number: updatedPhone,\n    };\n    console.log(updatedContact);\n    dispatch(updateContact(updatedContact));\n    closeModal();\n  };\n  return (\n    <form className={css.modalForm} onSubmit={handleEditContact}>\n      <label className={css.label} htmlFor=\"name\">\n        Name\n      </label>\n      <input\n        value={updatedName}\n        onChange={handleChange}\n        id=\"name\"\n        className={css.modalInput}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        autoComplete=\"off\"\n      />\n      <label className={css.label} htmlFor=\"number\">\n        Number\n      </label>\n      <input\n        value={updatedPhone}\n        onChange={handleChange}\n        id=\"number\"\n        className={css.modalInput}\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        autoComplete=\"off\"\n      />\n      <button className={css.addBtn} type=\"submit\">\n        EDIT\n      </button>\n    </form>\n  );\n};\n","import useModal from 'hooks/useModal';\nimport css from './Contact.module.css';\nimport PropTypes from 'prop-types';\nimport { CiUser, CiSquareRemove, CiEdit } from 'react-icons/ci';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contactsApi';\nimport { Modal } from 'components/Modal/Modal';\nimport { EditContactForm } from 'components/EditContactForm/EditContactForm';\n\nexport const Contact = ({ id, name, phone }) => {\n  const dispatch = useDispatch();\n  const { showModal, toggleModal } = useModal(false);\n\n  const handleDelete = () => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <>\n      <div className={css.contact}>\n        <h3 className={css.name}>\n          <CiUser />\n          {name}\n        </h3>\n        <p className={css.number}>{phone}</p>\n        <CiEdit onClick={() => toggleModal()} className={css.edit} />\n        <CiSquareRemove className={css.close} onClick={handleDelete} />\n      </div>\n      {showModal && (\n        <Modal closeModal={toggleModal}>\n          <EditContactForm\n            id={id}\n            name={name}\n            phone={phone}\n            closeModal={toggleModal}\n          />\n        </Modal>\n      )}\n    </>\n  );\n};\n\nContact.prototype = {\n  currentId: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const getContacts = state => state.contacts.items;\n\nexport const getIsLoading = state => state.contacts.isLoading;\n\nexport const getError = state => state.contacts.error;\n\nexport const getFilter = state => state.filter;\n\nexport const filteredContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filter) => {\n    return contacts\n      .filter(({ name }) => name.toLowerCase().includes(filter))\n      .sort((a, b) => a.name.localeCompare(b.name));\n  }\n);\n","import css from './ContactsList.module.css';\nimport { Contact } from 'components/contactEl/Contact';\nimport {\n  filteredContacts,\n  getError,\n  getIsLoading,\n} from 'redux/contacts/selectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\nimport Loader from 'components/Loader/Loader';\nimport { fetchContacts } from 'redux/contacts/contactsApi';\n\nexport const ContactsList = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(filteredContacts);\n  const loading = useSelector(getIsLoading);\n  const error = useSelector(getError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <ul className={css.list}>\n      {loading && <Loader />}\n      {error && <div>{error}</div>}\n      {contacts.map(({ id, name, number }) => {\n        return (\n          <>\n            <li key={id} className={css.item}>\n              <Contact id={id} name={name} phone={number} />\n            </li>\n          </>\n        );\n      })}\n    </ul>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"filterInput\":\"Filter_filterInput__e+SNN\",\"input\":\"Filter_input__R4e-B\",\"label\":\"Filter_label__IWv91\",\"wrapper\":\"Filter_wrapper__kfVHe\"};","import { CiSearch } from 'react-icons/ci';\nimport css from './Filter.module.css';\nimport { useDispatch } from 'react-redux';\n\nimport { filterContacts } from 'redux/contacts/filterSlice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  const handleChange = e => {\n    dispatch(filterContacts(e.target.value));\n  };\n  return (\n    <div className={css.wrapper}>\n      <label htmlFor=\"filter\" className={css.label}>\n        <CiSearch className={css.searchIcon} /> Search\n      </label>\n      <input\n        id=\"filter\"\n        className={css.filterInput}\n        type=\"text\"\n        name=\"filter\"\n        autoComplete=\"off\"\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n","import css from './ContactForm.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/contactsApi';\nimport { getContacts } from 'redux/contacts/selectors';\n\nexport const ContactsForm = ({ closeModal }) => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(getContacts);\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.target;\n    const newContact = {\n      name: form.elements.name.value,\n      number: form.elements.number.value,\n    };\n    if (contacts.find(contact => contact.name === newContact.name)) {\n      alert('This contact already exist');\n    } else {\n      dispatch(addContact(newContact));\n    }\n\n    closeModal();\n  };\n\n  return (\n    <form className={css.modalForm} onSubmit={handleSubmit}>\n      <label className={css.label} htmlFor=\"name\">\n        Name\n      </label>\n      <input\n        id=\"name\"\n        className={css.modalInput}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        autoComplete=\"off\"\n      />\n      <label className={css.label} htmlFor=\"number\">\n        Number\n      </label>\n      <input\n        id=\"number\"\n        className={css.modalInput}\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        autoComplete=\"off\"\n      />\n      <button className={css.addBtn} type=\"submit\">\n        Add\n      </button>\n    </form>\n  );\n};\n","import { Modal } from 'components/Modal/Modal';\nimport css from './ContactsPage.module.css';\nimport { ContactsList } from 'components/contactsList/ContactsList';\nimport { Filter } from 'components/filter/Filter';\nimport { useSelector } from 'react-redux';\nimport { selectUser } from 'redux/auth/authSelector';\nimport { ContactsForm } from 'components/contactsForm/ContactsForm';\nimport useModal from 'hooks/useModal';\n\nconst Contacts = () => {\n  const userName = useSelector(selectUser);\n  const { toggleModal, showModal } = useModal(false);\n\n  return (\n    <section className={css.contactSection}>\n      <h2>Hello, {userName.name}</h2>\n      <button type=\"button\" onClick={toggleModal} className={css.modalBtn}>\n        Add contact\n      </button>\n      {showModal && (\n        <Modal closeModal={toggleModal}>\n          <ContactsForm closeModal={toggleModal} />\n        </Modal>\n      )}\n\n      <Filter />\n      <h2>Contacts</h2>\n      <ContactsList />\n    </section>\n  );\n};\n\nexport default Contacts;\n"],"names":["Modal","children","closeModal","useEffect","onPessKeyDown","e","code","window","addEventListener","removeEventListener","onClick","target","nodeName","className","state","useState","showModal","setShowModal","toggleModal","prevState","EditContactForm","id","name","phone","updatedName","setUpdatedName","updatedPhone","setUpdatedPhone","dispatch","useDispatch","handleChange","value","css","onSubmit","updatedContact","number","console","log","updateContact","htmlFor","onChange","type","pattern","title","required","autoComplete","Contact","useModal","deleteContact","prototype","currentId","PropTypes","getContacts","contacts","items","getIsLoading","isLoading","getError","error","filteredContacts","createSelector","filter","toLowerCase","includes","sort","a","b","localeCompare","ContactsList","useSelector","loading","fetchContacts","Loader","map","Filter","filterContacts","ContactsForm","preventDefault","form","newContact","elements","find","contact","alert","addContact","userName","selectUser"],"sourceRoot":""}